{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# Summative Assessment 2\n",
        "\n",
        "This assessment is worth a total of 50 points. You have until 10 minutes before the first bell of the class period to submit your work. Part 1 of SA2 is worth 30 points.\n",
        "\n",
        "Late submissions will not be accepted and will result in a forfeiture of points.\n",
        "\n",
        "---\n",
        "\n",
        "You are permitted to use your notes, class material, and only the following search engines during the exam:\n",
        "* https://marginalia-search.com\n",
        "* https://www.ecosia.org/\n",
        "* https://www.startpage.com/\n",
        "\n",
        "**Important**: The use of artificial intelligence is strictly forbidden. Opening any dedicated AI chatbot (such as ChatGPT, Claude, Gemini, DeepSeek, Copilot, Perplexity, Mistral, Grok, etc.) will be considered a serious academic violation and will result in a grade of 0 for the exam. No further concessions will be given.\n",
        "\n",
        "If a permitted website automatically presents an AI-generated answer, you may view it but must not interact with the AI further (e.g., by asking follow-up questions).\n",
        "\n",
        "---\n",
        "\n",
        "Please submit the notebook file directly to Canvas. No need to zip the file nor include a Certificate of Authorship (COA).\n",
        "\n",
        "---\n",
        "**For Colab users**\n",
        "\n",
        "How to turn off AI assistance in Colab:\n",
        "Go to Tools > Settings > AI Assistance, then turn off code suggestions and explanations.\n",
        "\n",
        "Also, disable any AI browser extensions (like Copilot or Kite) to ensure no AI-generated help is used."
      ],
      "metadata": {
        "id": "YXuTgbYMGp8_"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Part 1: Easy - Foundations (6 points total, 1 pt each)\n"
      ],
      "metadata": {
        "id": "q81vrJdCoVCx"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "1. **Create a DataFrame**: Create a pandas DataFrame named `class_grades` from the following dictionary and display it."
      ],
      "metadata": {
        "id": "NZgiYPF8oYna"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "godB4oMnoUgQ"
      },
      "outputs": [],
      "source": [
        "data = {'Student': ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'], 'Midterm': [85, 90, 78, 92, 80, 100, 50, 84], 'Final': [88, 85, 80, 95, 80, 78, 94, 96]}\n",
        "\n",
        "# Code here"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "2. **Select Data**: From the `class_grades` DataFrame, select and display the 'Final' grades for all students."
      ],
      "metadata": {
        "id": "C0KcYh9EoeN5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Code here"
      ],
      "metadata": {
        "id": "AwqDkMsRojSt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "3. **Filter Rows**: Display the rows from `class_grades` for students who scored higher than 85 on the 'Midterm'."
      ],
      "metadata": {
        "id": "zLunles0okQv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Code here"
      ],
      "metadata": {
        "id": "kJ7AKswlo0NX"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "4. **Add a New Column**: Create a new column called `Average` in the `class_grades` DataFrame that contains the average of the 'Midterm' and 'Final' grades for each student."
      ],
      "metadata": {
        "id": "i40T3wzAo09v"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Code here"
      ],
      "metadata": {
        "id": "9YckkzVKpAQY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "5. **Basic Plot**: Create a simple bar chart showing the 'Final' grade for each 'Student'. No need to label the axes."
      ],
      "metadata": {
        "id": "fdctpC7eo77j"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Code here"
      ],
      "metadata": {
        "id": "6xXEYfRBo_Zp"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "6. **Calculate a Statistic**: Calculate and print the median grade for the 'Midterm' column.\n",
        "\n"
      ],
      "metadata": {
        "id": "5tv9pq8cpCjL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Code here"
      ],
      "metadata": {
        "id": "xya6gRVhpCUV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Part 2: Medium - Exploring a Public Dataset (9 points total, 3 pts each)\n",
        "\n",
        "**Instructions**: For this section, use the \"Video Game Sales\" dataset.\n",
        "\n",
        "The dataset can be found here: https://www.kaggle.com/datasets/kedokedokedo/vgsales"
      ],
      "metadata": {
        "id": "YwEE07zgpJD_"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "7. **Regional Performance**: Read the dataset into a DataFrame. Find the total EU_Sales (sales in Europe) for all games published by 'Nintendo'."
      ],
      "metadata": {
        "id": "pI9V4nZvpitd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Code here"
      ],
      "metadata": {
        "id": "5l7m2yAapKh-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "8. **Genre Analysis**: Identify the top 5 game `Genre`s by their average `Global_Sales`. Create a horizontal bar chart that displays the average global sales for these top 5 genres. Make sure your chart is titled \"Top 5 Genres by Average Global Sales\" and the axes are clearly labeled."
      ],
      "metadata": {
        "id": "uF107c6xpuEF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Code here"
      ],
      "metadata": {
        "id": "QONn_yojp2MA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "9. **Advanced Filtering**: Find all games on the 'PS4' `Platform` that were released in the year 2015 or later. Of those games, how many were published by 'Sony Computer Entertainment'?"
      ],
      "metadata": {
        "id": "JtgV8xL3p28Z"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Code here"
      ],
      "metadata": {
        "id": "o12whaj8p80v"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Part 3: Hard - Themed Scenarios (15 points total, 5 pts each)\n",
        "\n",
        "***You may use multiple code blocks per question.***"
      ],
      "metadata": {
        "id": "NQXSTMuCp_j8"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "10. **The One Music PH Analyst**\n",
        "\n",
        "**Scenario**: You're a data analyst for a popular Filipino music streaming service. You've been given a dataset of the most-streamed OPM tracks for the past year. Your task is to find insights about artist popularity and song characteristics.\n",
        "\n",
        "**Dataset**: https://drive.google.com/file/d/1k2SKPgPr24U4IKMDbbiaplolOI5IYzMO/view?usp=sharing\n",
        "\n",
        "**Task**:\n",
        "1. Identify the artist with the highest average streams_in_m per song.\n",
        "2. For only that artist, create a scatter plot that shows the relationship between a song's `danceability` (x-axis) and its `energy` (y-axis).\n",
        "3. Color the points on the scatter plot based on whether the song `is_ballad` (1 for yes, 0 for no).\n",
        "4. Title your plot \"Danceability vs. Energy for [Artist Name]'s Hits\", replacing `[Artist Name]` with the name of the artist you identified."
      ],
      "metadata": {
        "id": "CmPLl0UEqGbg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Code here"
      ],
      "metadata": {
        "id": "sHfSuyBAqtGf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "11. **The UAAP Glory Days**\n",
        "\n",
        "**Scenario**: You are a sports data scientist for the Ateneo Blue Eagles. You have been handed an Excel file containing basketball statistics from two legendary UAAP seasons: Season 74 (the last of a 5-peat) and Season 81 (the start of another championship run). The data is messy and spread across two sheets. Your goal is to find the player who showed the most significant statistical improvement between these two eras.\n",
        "\n",
        "**Datasets**: You are given two CSV files, `s74_stats.csv` and `s81_stats.csv`. They can be found here: https://drive.google.com/file/d/19qw6jxQxtg2rxx01pDbziZUkiDYCktL_/view?usp=sharing\n",
        "\n",
        "The column information are as follows:\n",
        "* `Player`: The name of the athlete.\n",
        "* `Team`: The abbreviation for the UAAP university team the player belongs to (e.g., ADMU for Ateneo de Manila University).\n",
        "* `GP`: Games Played - The total number of games the player participated in during Season 74.\n",
        "* `FGM`: Field Goals Made - The number of successful shots from the court (2 or 3-point shots).\n",
        "* `FTM`: Free Throws Made - The number of successful 1-point shots from the free-throw line.\n",
        "* `REB/Rebounds`: Rebounds - The total number of times a player recovered the ball after a missed shot attempt by either team.\n",
        "* `Points`: The total points the player scored throughout the season.\n",
        "* `Assists`: The total number of passes a player made that directly led to a teammate scoring a basket.\n",
        "\n",
        "\n",
        "**Task:**\n",
        "> Your objective is to identify the UAAP player who showed the largest improvement between Season 74 and Season 81 based on a custom \"Impact Score.\" The score is defined as a player's per-game average of points, rebounds, and assists: `(Points + Rebounds + Assists) / GP`.\n",
        ">\n",
        ">To find the answer, you will need to process and combine the two datasets. Note that the raw data provided is not perfectly consistent. You are free to make your own assumptions, state them as comments.\n",
        ">\n",
        ">Report the name of the player with the highest increase in \"Impact Score\" and the value of their improvement.\n",
        ">\n",
        "> **Hint**: *After filtering for the player, you may find the `.diff()` method useful for this final step.*\n",
        ">\n",
        ">This task is vague. Figure out how to do it.\n"
      ],
      "metadata": {
        "id": "x_oYpRifsJps"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Code here"
      ],
      "metadata": {
        "id": "AHUSqwJBuvTQ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "12. **The Katipunan Food Delivery Challenge**\n",
        "\n",
        "**Scenario**: You're an operations manager for a new food delivery service exclusive to the Ateneo de Manila campus, \"Eagle Eats\". You're analyzing the previous day's orders to optimize delivery fees. The dataset contains some missing `delivery_fee` values.\n",
        "\n",
        "**Dataset**: https://docs.google.com/spreadsheets/d/12dba21ktvE_cdIEwdtX4aeRnCBD6n_uX/edit?usp=sharing&ouid=111965724574713841049&rtpof=true&sd=true\n",
        "\n",
        "**Task**:\n",
        "1. Read the `eagle_eats.xlsx` file. The `delivery_fee` column has missing values. Your first task is to impute these missing values using the mean delivery fee specific to the restaurant of that order. (e.g., missing KFC fee should be filled with the average of other KFC fees).\n",
        "2. Write a Python function `calculate_surge(order_time)` that takes the order time (a string like 'HH:MM') as input. The function should return a surge multiplier of 1.25 if the order was placed during the lunch rush (from 11:30 to 13:00, inclusive), and 1.0 otherwise.\n",
        "3. Apply this function to your DataFrame to create a new column called `final_fee`, which is the `delivery_fee` (after imputation) multiplied by the surge multiplier.\n",
        "4. Calculate and print the total revenue from `final_fee` generated from deliveries for each building."
      ],
      "metadata": {
        "id": "qYHzalfrqz1Q"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Code here"
      ],
      "metadata": {
        "id": "SPx51Lb2sHCc"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}